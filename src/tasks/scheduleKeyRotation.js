const cron = require('node-cron');
const keyRotator = require('../crypto/keyRotator');
const secureAuthService = require('../security/secure-auth.service');
const secureCommunications = require('../services/secure-communications.service');

class ScheduleKeyRotation {
    constructor() {
        this.isRotationEnabled = process.env.AUTO_ROTATION_ENABLED === 'true';
        this.isRunning = false;
        this.rotationHistory = [];
        this.nextRotationTime = null;

        if (this.isRotationEnabled) {
            this.initializeSchedules();
        } else {
            console.log('‚è∞ Rotaci√≥n autom√°tica deshabilitada por configuraci√≥n');
        }
    }

    initializeSchedules() {
        console.log('‚è∞ Inicializando planificador de rotaci√≥n de claves...');

        // Rotaci√≥n mensual de claves - d√≠a 1 de cada mes a las 2:00 AM
        cron.schedule('0 2 1 * *', async () => {
            await this.executeMonthlyRotation();
        }, {
            scheduled: true,
            timezone: "America/Mexico_City"
        });

        // Limpieza de sesiones expiradas - todos los d√≠as a las 3:00 AM
        cron.schedule('0 3 * * *', async () => {
            await this.executeSessionCleanup();
        }, {
            scheduled: true,
            timezone: "America/Mexico_City"
        });

        // Verificaci√≥n de integridad - cada 6 horas
        cron.schedule('0 */6 * * *', async () => {
            await this.executeIntegrityCheck();
        }, {
            scheduled: true,
            timezone: "America/Mexico_City"
        });

        this.calculateNextRotation();
        console.log('‚úÖ Planificador inicializado');
    }

    async executeMonthlyRotation() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Rotaci√≥n ya en progreso, saltando ejecuci√≥n');
            return;
        }

        try {
            this.isRunning = true;
            const rotationId = this.generateRotationId();
            const startTime = Date.now();

            console.log(`üîÑ Iniciando rotaci√≥n mensual ${rotationId}...`);

            // Ejecutar rotaci√≥n de claves
            const rotationResult = await keyRotator.rotateKeys();

            const duration = Date.now() - startTime;

            // Registrar rotaci√≥n exitosa
            this.rotationHistory.push({
                id: rotationId,
                timestamp: new Date().toISOString(),
                duration,
                status: 'success',
                details: rotationResult
            });

            console.log(`‚úÖ Rotaci√≥n mensual ${rotationId} completada en ${duration}ms`);

            // Enviar notificaci√≥n de √©xito
            await this.sendRotationSuccessNotification(rotationId, duration, rotationResult);

            this.calculateNextRotation();

        } catch (error) {
            const rotationId = this.generateRotationId();

            console.error(`‚ùå Error en rotaci√≥n mensual ${rotationId}:`, error);

            // Registrar rotaci√≥n fallida
            this.rotationHistory.push({
                id: rotationId,
                timestamp: new Date().toISOString(),
                status: 'failed',
                error: error.message
            });

            // Enviar alerta cr√≠tica de fallo
            await secureCommunications.sendSecureAlert({
                type: 'KEY_ROTATION_FAILED',
                severity: 'critical',
                details: `Rotaci√≥n mensual ${rotationId} fall√≥: ${error.message}`,
                action: 'Se requiere intervenci√≥n manual inmediata',
                timestamp: new Date().toISOString()
            }, 'critical');

        } finally {
            this.isRunning = false;
        }
    }

    async sendRotationSuccessNotification(rotationId, duration, rotationResult) {
        try {
            await secureCommunications.sendSecureAlert({
                type: 'KEY_ROTATION_SUCCESS',
                severity: 'info',
                details: `Rotaci√≥n ${rotationId} completada exitosamente`,
                duration: duration,
                timestamp: new Date().toISOString(),
                nextRotation: this.getNextRotationDate()
            }, 'normal');

            console.log(`üìß Notificaci√≥n de rotaci√≥n exitosa enviada para ${rotationId}`);

        } catch (error) {
            console.error('‚ùå Error enviando notificaci√≥n de rotaci√≥n exitosa:', error);
        }
    }

    async executeSessionCleanup() {
        try {
            console.log('üßπ Ejecutando limpieza de sesiones expiradas...');

            const db = require('../config/database');

            // Limpiar sesiones expiradas
            const result = await db.query(
                'DELETE FROM user_sessions WHERE expires_at < NOW()'
            );

            if (result.affectedRows > 0) {
                console.log(`üßπ ${result.affectedRows} sesiones expiradas eliminadas`);
            }

            // Limpiar IPs bloqueadas expiradas
            const ipResult = await db.query(
                'DELETE FROM blocked_ips WHERE blocked_until < NOW()'
            );

            if (ipResult.affectedRows > 0) {
                console.log(`üßπ ${ipResult.affectedRows} IPs desbloqueadas autom√°ticamente`);
            }

            console.log('‚úÖ Limpieza de sesiones completada');

        } catch (error) {
            console.error('‚ùå Error en limpieza de sesiones:', error);
        }
    }

    async executeIntegrityCheck() {
        try {
            console.log('üîç Ejecutando verificaci√≥n de integridad programada...');

            const serverCheck = require('../middleware/serverCheck.middleware');
            await serverCheck.performAsyncCheck();

            console.log('‚úÖ Verificaci√≥n de integridad completada');

        } catch (error) {
            console.error('‚ùå Error en verificaci√≥n de integridad:', error);

            // Enviar alerta si la verificaci√≥n falla
            await secureCommunications.sendSecureAlert({
                type: 'INTEGRITY_CHECK_FAILED',
                severity: 'high',
                details: `Verificaci√≥n de integridad fall√≥: ${error.message}`,
                timestamp: new Date().toISOString()
            }, 'high');
        }
    }

    generateRotationId() {
        const date = new Date();
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const random = Math.random().toString(36).substring(2, 8).toUpperCase();

        return `ROT-${year}${month}-${random}`;
    }

    calculateNextRotation() {
        const now = new Date();
        const nextMonth = new Date(now.getFullYear(), now.getMonth() + 1, 1, 2, 0, 0);
        this.nextRotationTime = nextMonth;
    }

    getNextRotationDate() {
        return this.nextRotationTime ? this.nextRotationTime.toISOString() : null;
    }

    // M√©todo para ejecutar rotaci√≥n manual
    async executeManualRotation() {
        console.log('üîÑ Ejecutando rotaci√≥n manual de claves...');

        if (this.isRunning) {
            throw new Error('Ya hay una rotaci√≥n en progreso');
        }

        try {
            this.isRunning = true;
            const rotationId = this.generateRotationId();

            console.log(`üöÄ Iniciando rotaci√≥n manual ${rotationId}...`);

            const result = await keyRotator.rotateKeys();

            this.rotationHistory.push({
                id: rotationId,
                timestamp: new Date().toISOString(),
                status: 'success',
                type: 'manual',
                details: result
            });

            console.log(`‚úÖ Rotaci√≥n manual ${rotationId} completada`);
            return { success: true, rotationId, result };

        } catch (error) {
            console.error('‚ùå Error en rotaci√≥n manual:', error);
            throw error;
        } finally {
            this.isRunning = false;
        }
    }

    getScheduleStatus() {
        return {
            isEnabled: this.isRotationEnabled,
            isRunning: this.isRunning,
            nextRotation: this.getNextRotationDate(),
            rotationHistory: this.rotationHistory.slice(-10),
            totalRotations: this.rotationHistory.length
        };
    }
}

module.exports = new ScheduleKeyRotation();